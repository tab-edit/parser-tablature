@skip { space | Comment } {
    @top Tablature {
        (( TabSegment (newline|eof) ) | newline)+
    }

    TabSegment {
        (TabSegmentLine (newline|eof))+
    }
    /**
    TODO: this needs to be (TabString space)* TabString but we skip spaces.
    we would need an external tokenizer to enforce this space
    */
    TabSegmentLine { TabString+ }
}

@skip { space }

TabString {
    (
        MeasureLineName measureLineNoDivider |
        (MeasureLineName | InsertLineName) MeasureLine
    )
    MeasureLine*
    DividerEnd
    Multiplier?
    "?"
}

// Measure Lines
MeasureLine {
    DividerOpen
    measurelineContent
}
measureLineNoDivider[@name=MeasureLine] {
    InsertDivider
    measurelineContent
}
measurelineContent {
    "-"+
}

// Line names
MeasureLineName[@isGroup=LineName] { measureLineNameToken }
InsertLineName[@isGroup=LineName] { insertLineName }

// Divider
InsertDivider[@isGroup=Divider] { insertDivider }
DividerOpen[@isGroup=Divider, closedBy=divider] { divider }
DividerEnd[@isGroup=Divider] { divider }
divider { "|" "|"? }


Multiplier { (timesSymb number) | (number timesSymb) | (number timesWord) }

@tokens {
    space { $[ \t\f]+ }
    newline { $[\n\r] }
    Comment { "#" ![\n]* }

    digit { $[0-9] }
    number { digit+ }
    letter { $[a-zA-Z] }

    measureLineNameToken { letter (letter|digit)? (letter|digit)? (letter|digit)? }

    timesSymb { $[xX] }
    timesWord { $[Tt] $[Ii] $[Mm] $[Ee] $[Ss]}
}

@external tokens endOfFile from "./tokens" { eof }
@external tokens insertions from "./tokens" { insertLineName, insertDivider }